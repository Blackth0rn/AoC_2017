// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var List                    = require("bs-platform/lib/js/list.js");
var $$Array                 = require("bs-platform/lib/js/array.js");
var $$String                = require("bs-platform/lib/js/string.js");
var Pervasives              = require("bs-platform/lib/js/pervasives.js");
var Caml_format             = require("bs-platform/lib/js/caml_format.js");
var Readline$Day21          = require("../../util/src/readline.bs.js");
var Caml_builtin_exceptions = require("bs-platform/lib/js/caml_builtin_exceptions.js");

Readline$Day21.setPrompt("Input:");

Readline$Day21.prompt(/* () */0);

function listChar(line) {
  console.log(line);
  if (line === "") {
    return /* [] */0;
  } else {
    var exit = 0;
    var value;
    try {
      value = $$String.index(line, /* "\t" */9);
      exit = 1;
    }
    catch (exn){
      if (exn === Caml_builtin_exceptions.not_found) {
        return /* :: */[
                Caml_format.caml_int_of_string($$String.sub(line, 0, line.length)),
                /* [] */0
              ];
      } else {
        throw exn;
      }
    }
    if (exit === 1) {
      return /* :: */[
              Caml_format.caml_int_of_string($$String.sub(line, 0, value)),
              listChar($$String.sub(line, value + 1 | 0, (line.length - value | 0) - 1 | 0))
            ];
    }
    
  }
}

var lines = /* array */[];

function handleLine(line) {
  var intList = listChar(line);
  console.log(intList);
  lines.push(intList);
  return /* () */0;
}

function calculateChecksumLine(carry, line) {
  var max = List.fold_left((function (curMax, num) {
          var match = +(curMax > num);
          if (match !== 0) {
            return curMax;
          } else {
            return num;
          }
        }), 0, line);
  var min = List.fold_left((function (curMin, num) {
          var match = +(curMin < num);
          if (match !== 0) {
            return curMin;
          } else {
            return num;
          }
        }), Pervasives.max_int, line);
  return carry + (max - min | 0) | 0;
}

function calculateChecksum(lines) {
  var result = $$Array.fold_left(calculateChecksumLine, 0, lines);
  console.log(result);
  return /* () */0;
}

Readline$Day21.rl.on("line", (function (line) {
          switch (line) {
            case "calc" : 
                calculateChecksum(lines);
                break;
            case "exit" : 
                Readline$Day21.close(/* () */0);
                break;
            default:
              handleLine(line);
          }
          Readline$Day21.prompt(/* () */0);
          return /* () */0;
        })).on("close", (function () {
        console.log("Bye");
        global.process.exit(0);
        return /* () */0;
      }));

exports.listChar              = listChar;
exports.lines                 = lines;
exports.handleLine            = handleLine;
exports.calculateChecksumLine = calculateChecksumLine;
exports.calculateChecksum     = calculateChecksum;
/*  Not a pure module */
