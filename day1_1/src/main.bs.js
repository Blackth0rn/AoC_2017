// Generated by BUCKLESCRIPT VERSION 2.1.0, PLEASE EDIT WITH CARE
'use strict';

var Fs          = require("fs");
var List        = require("bs-platform/lib/js/list.js");
var $$String    = require("bs-platform/lib/js/string.js");
var Pervasives  = require("bs-platform/lib/js/pervasives.js");
var Caml_string = require("bs-platform/lib/js/caml_string.js");

function string_to_int_list(string) {
  switch (string) {
    case "" : 
    case "\n" : 
        return /* [] */0;
    default:
      return /* :: */[
              Caml_string.get(string, 0) - 48 | 0,
              string_to_int_list($$String.sub(string, 1, string.length - 1 | 0))
            ];
  }
}

function print_int($$int) {
  console.log(Pervasives.string_of_int($$int));
  return /* () */0;
}

function sum_consecutive(lst) {
  var adder = function (inner_lst) {
    if (inner_lst) {
      var rest = inner_lst[1];
      var num = inner_lst[0];
      if (rest) {
        var match = +(num === List.hd(rest));
        if (match !== 0) {
          return num + adder(rest) | 0;
        } else {
          return 0 + adder(rest) | 0;
        }
      } else {
        var match$1 = +(num === List.hd(lst));
        if (match$1 !== 0) {
          return num;
        } else {
          return 0;
        }
      }
    } else {
      return 0;
    }
  };
  return adder(lst);
}

var filename = "input.txt";

var contents = Fs.readFileSync(filename, "utf8");

console.log("Input: " + contents);

console.log("Input length: " + Pervasives.string_of_int(contents.length));

var list_of_ints = string_to_int_list(contents);

List.map(print_int, list_of_ints);

console.log("Output: " + Pervasives.string_of_int(sum_consecutive(list_of_ints)));

exports.string_to_int_list = string_to_int_list;
exports.print_int          = print_int;
exports.sum_consecutive    = sum_consecutive;
exports.filename           = filename;
exports.contents           = contents;
exports.list_of_ints       = list_of_ints;
/* contents Not a pure module */
